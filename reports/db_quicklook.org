#+STARTUP: content indent hideblocks
#+TITLE: Check data loaded onto database
#+OPTIONS: ^:{}
#+LATEX_HEADER: \usepackage[margin=2.5cm]{geometry}
#+PROPERTY: header-args:python :session *Python* :tangle yes

#+NAME: session_init
#+BEGIN_SRC python :results silent :exports none
import matplotlib as mpl
mpl.use("Agg")
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import psycopg2 as pg
from mpl_toolkits.basemap import Basemap
plt.style.use('ggplot')
# Workaround for stupid problem in Debian now:
plt.rcParams['mathtext.fontset']='stix'
# Set up connection for the session
conn=pg.connect("host=localhost port=5433 dbname=gases")
#+END_SRC

* Ship track

#+NAME: ship_track
#+BEGIN_SRC python :results file :exports results
qry="""
  SELECT DISTINCT ON ("time")
    date_trunc('minute', "time") AS "time",
    longitude, latitude, speed_over_ground AS sog,
    course_over_ground AS cog, heading, pitch, roll, heave
    FROM navigation_series
    WHERE logging_group_id='99'
    ORDER BY "time";
"""
nav=pd.read_sql(qry, conn, parse_dates=['time'],
                index_col="time")
lonmin=np.min(nav['longitude'])
latmin=np.min(nav['latitude'])
lonmax=np.max(nav['longitude'])
latmax=np.max(nav['latitude'])
lat_0=(latmin + latmax) / 2.0
lon_0=(lonmin + lonmax) / 2.0
lat_1=latmin + ((latmax - latmin) / 6.0)
lat_2=latmax - ((latmax - latmin) / 6.0)
parallels=np.arange(45.0, 95, 5)
meridians=np.arange(-50.0, -170, -10)
m=Basemap(projection="laea", lon_0=lon_0, lat_0=lat_0,
          lat_1=lat_1, lat_2=lat_2, width=7e6, height=4.8e6,
          resolution="l", lat_ts=lat_0)
x, y = m(nav['longitude'].values, nav['latitude'].values)
x[x == 1e30]=np.nan
y[y == 1e30]=np.nan
m.fillcontinents(color="0.7")
m.drawparallels(parallels, labels=[0, 1, 1, 0])
m.drawmeridians(meridians, labels=[1, 0, 0, 1])
m.plot(x, y, color='r')
plt.savefig("ship_track.png"); plt.close()
"ship_track.png"
#+END_SRC

#+ATTR_LATEX: :width \textwidth
#+RESULTS: ship_track
[[file:ship_track.png]]

* Ship motion

As measured by Applanix instrument on the ship.

#+NAME: ship_motion
#+BEGIN_SRC python :results file :exports results
fig, axs = plt.subplots(3, 1, sharex=True)
fig.set_size_inches((11, 9))
nav[['sog']].plot(ax=axs[0], legend=False)
axs[0].set_ylabel('Speed over ground (m/s)'); axs[0].set_xlabel('')
nav[['cog']].plot(ax=axs[1], legend=False)
axs[1].set_ylabel("Course over ground ($^\circ$)"); axs[1].set_xlabel('')
nav[['heading']].plot(ax=axs[2], rot=0, legend=False)
axs[2].set_ylabel("Heading ($^\circ$)"); axs[2].set_xlabel('')
fig.tight_layout()
fig.savefig('navigation.png', bbox_inches='tight'); plt.close()
'navigation.png'
#+END_SRC

#+ATTR_LATEX: :width \textwidth
#+RESULTS: ship_motion
[[file:navigation.png]]

* Meteorology

** Measurements at foredeck tower

#+NAME: meteorology_01
#+BEGIN_SRC python :results file :exports results
  qry="""
  SELECT "time", atmospheric_pressure, air_temperature,
    relative_humidity, surface_temperature,
    wind_speed, wind_direction
  FROM meteorology_series
  WHERE logging_group_id='98'
  ORDER BY "time"
  """
  met=pd.read_sql(qry, conn, parse_dates=['time'],
                  index_col="time")
  fig, axs = plt.subplots(3, 1, sharex=True)
  fig.set_size_inches((11, 9))
  met[['atmospheric_pressure']].plot(ax=axs[0], legend=False)
  axs[0].set_ylabel('Atmospheric pressure (kPa)'); axs[0].set_xlabel('')
  met[['air_temperature']].plot(ax=axs[1], legend=False)
  axs[1].set_ylabel('Air temperature ($^\circ$C)'); axs[1].set_xlabel('')
  met[['relative_humidity']].plot(ax=axs[2], rot=0, legend=False)
  axs[2].set_ylabel('Relative humidity (%)'); axs[2].set_xlabel('')
  fig.savefig("meteorology_01.png", bbox_inches="tight"); plt.close()
  "meteorology_01.png"
#+END_SRC

#+ATTR_LATEX: :width \textwidth
#+RESULTS: meteorology_01
[[file:meteorology_01.png]]

#+NAME: meteorology_02
#+BEGIN_SRC python :results file :exports results
  fig, axs = plt.subplots(2, 1, sharex=True)
  fig.set_size_inches((11, 7))
  met[['wind_speed']].plot(ax=axs[0], legend=False)
  axs[0].set_ylabel('Wind speed (m/s)'); axs[0].set_xlabel('')
  met[['wind_direction']].plot(ax=axs[1], rot=0, legend=False)
  axs[1].set_ylabel('Wind direction ($^\circ$)'); axs[1].set_xlabel('')
  fig.savefig("meteorology_02.png", bbox_inches="tight"); plt.close()
  "meteorology_02.png"
#+END_SRC

#+ATTR_LATEX: :width \textwidth
#+RESULTS: meteorology_02
[[file:meteorology_02.png]]

** AVOS system above wheelhouse

#+NAME: meteorology_03
#+BEGIN_SRC python :results file :exports none
  qry="""
  SELECT DISTINCT ON ("time")
    date_trunc('minute', "time") AS "time",
    atmospheric_pressure, air_temperature,
    relative_humidity, surface_temperature,
    wind_speed, wind_direction
  FROM meteorology_series
  WHERE logging_group_id='95'
  ORDER BY "time"
  """
  met_avos=pd.read_sql(qry, conn, parse_dates=['time'],
                       index_col="time")
  fig, axs = plt.subplots(4, 1, sharex=True)
  fig.set_size_inches((11, 12.5))
  met_avos[['atmospheric_pressure']].plot(ax=axs[0], legend=False)
  axs[0].set_ylabel('Atmospheric pressure (mBar)'); axs[0].set_xlabel('')
  met_avos[['air_temperature']].plot(ax=axs[1], legend=False)
  axs[1].set_ylabel('Air temperature ($^\circ$C)'); axs[1].set_xlabel('')
  met_avos[['relative_humidity']].plot(ax=axs[2], legend=False)
  axs[2].set_ylabel('Relative humidity (%)'); axs[2].set_xlabel('')
  met_avos[['surface_temperature']].plot(ax=axs[3], rot=0, legend=False)
  axs[3].set_ylabel('Surface temperature ($^\circ$C)'); axs[3].set_xlabel('')
  fig.savefig("meteorology_03.png", bbox_inches="tight"); plt.close()
  "meteorology_03.png"
#+END_SRC

#+NAME: meteorology_04
#+BEGIN_SRC python :results file :exports none
  fig, axs = plt.subplots(2, 1, sharex=True)
  fig.set_size_inches((11, 7))
  met_avos[['wind_speed']].plot(ax=axs[0], legend=False)
  axs[0].set_ylabel('Wind speed (m/s)'); axs[0].set_xlabel('')
  met_avos[['wind_direction']].plot(ax=axs[1], rot=0, legend=False)
  axs[1].set_ylabel('Wind direction ($^\circ$)'); axs[1].set_xlabel('')
  fig.savefig("meteorology_04.png", bbox_inches="tight"); plt.close()
  "meteorology_04.png"
#+END_SRC

* Radiation

#+NAME: radiation_01
#+BEGIN_SRC python :results file :exports results
qry="""
SELECT "time", "PAR", "K_down", "LW_down",
  "UV_b", "UV_a", "UV_broad"
FROM radiation_series
WHERE logging_group_id=71
ORDER BY "time"
"""
rad=pd.read_sql(qry, conn, parse_dates=['time'],
                index_col="time")
fig, axs = plt.subplots(3, 1, sharex=True)
fig.set_size_inches((11, 9))
rad[['PAR']].plot(ax=axs[0], legend=False)
axs[0].set_ylabel('PAR ($\mu mol/m^{2}/s$)'); axs[0].set_xlabel('')
rad[['K_down']].plot(ax=axs[1], legend=False)
axs[1].set_ylabel('K_down ($W/m^{2}$)'); axs[1].set_xlabel('')
rad[['LW_down']].plot(ax=axs[2], rot=0, legend=False)
axs[2].set_ylabel('LW_down ($W/m^{2}$)'); axs[2].set_xlabel('')
fig.savefig("radiation_01.png", bbox_inches="tight"); plt.close()
"radiation_01.png"
#+END_SRC

#+ATTR_LATEX: :width \textwidth
#+RESULTS: radiation_01
[[file:radiation_01.png]]

* Tower motion

One-minute average as an overview:

#+NAME: tower_motion
#+BEGIN_SRC python :session :results file :exports results
  qry="""
  SELECT date_trunc('minute', "time") AS time_study,
  avg(acceleration_x) AS acceleration_x,
  avg(acceleration_y) AS acceleration_y,
  avg(acceleration_z) AS acceleration_z,
  avg(rate_x) AS rate_x,
  avg(rate_y) AS rate_y,
  avg(rate_z) AS rate_z
  FROM motion_series WHERE logging_group_id BETWEEN 100 and 102
  GROUP BY date_trunc('minute', "time")
  ORDER BY date_trunc('minute', "time")
  """
  mot=pd.read_sql(qry, conn, parse_dates=['time_study'],
                  index_col="time_study")
  fig, axs = plt.subplots(2, 1, sharex=True)
  fig.set_size_inches((11, 7))
  mot[['acceleration_x', 'acceleration_y', 'acceleration_z']].plot(ax=axs[0],
                                                                   ylim=(-1, 0.9),
                                                                   legend=False)
  axs[0].set_ylabel('Translational acceleration ($m/s^{2}$)')
  axs[0].set_xlabel('')
  mot[['rate_x', 'rate_y', 'rate_z']].plot(ax=axs[1], ylim=(-2, 1.5),
                                           rot=0, legend=False)
  axs[1].set_ylabel('Angular velocity ($^\circ/s$)')
  axs[1].set_xlabel('')
  leg = axs[1].legend(loc=9, bbox_to_anchor=(0.5, -0.1), frameon=False,
                      borderaxespad=0, ncol=3)
  leg.get_texts()[0].set_text("x")
  leg.get_texts()[1].set_text("y")
  leg.get_texts()[2].set_text("z")
  fig.tight_layout()
  fig.savefig('motion.png', bbox_extra_artists=(leg,), bbox_inches='tight')
  plt.close()
  'motion.png'
#+END_SRC

#+ATTR_LATEX: :width \textwidth
#+RESULTS: tower_motion
[[file:motion.png]]

* Underway system

#+NAME: underway_01
#+BEGIN_SRC python :results file :exports results
  qry="""
  SELECT time_study, time_1min, equ_temperature, "uw_CO2_fraction",
    "uw_H2O_fraction", uw_temperature_analyzer, uw_pressure_analyzer,
    equ_pressure, "H2O_flow", air_flow_analyzer, condensation_equ,
    ctd_pressure, ctd_temperature, ctd_conductivity, "ctd_O2_saturation",
    "ctd_O2_concentration", temperature_external, tsg_temperature,
    bad_ctd_flag, "bad_CO2_flag", "bad_H2O_flag", "bad_H2O_flow_flag",
    bad_pressure_analyzer_flag, bad_temperature_analyzer_flag,
    bad_equ_temperature_flag, bad_temperature_external_flag
  FROM amundsen_flux.underway_1s_2016;
  """
  pCO2=pd.read_sql(qry, conn, parse_dates=['time_study', 'time_1min'],
                   index_col="time_study")

  # Y-limits
  CO2_lims = (100, 1000)
  H2O_lims = (2, 18)
  analyzer_temp_lims = (5, 40)
  pressure_lims = (970, 1040)
  gasflow_lims = (50, 120)
  H2O_temp_lims = (-5, 30)

  fig, axs = plt.subplots(5, 1, sharex=True)
  fig.set_size_inches((11.5, 12.5))
  pCO2[["uw_CO2_fraction"]].dropna().plot(ax=axs[0], title="EQU samples",
                                          ylim=CO2_lims, legend=False)
  axs[0].set_ylabel('CO2 fraction\n($\mu$mol/mol)')
  axs[0].set_xlabel('')
  pCO2[["uw_H2O_fraction"]].dropna().plot(ax=axs[1], ylim=H2O_lims,
                                          legend=False)
  axs[1].set_ylabel('H2O fraction\n(mmol/mol)')
  axs[1].set_xlabel('')
  pCO2[["uw_temperature_analyzer"]].dropna().plot(ax=axs[2],
                                                  ylim=analyzer_temp_lims,
                                                  legend=False)
  axs[2].set_ylabel('Temperature analyzer\n(C$^\circ$)')
  axs[2].set_xlabel('')
  pCO2[["uw_pressure_analyzer"]].dropna().plot(ax=axs[3],
                                               ylim=pressure_lims,
                                               legend=False)
  axs[3].set_ylabel('Pressure analyzer\n(mbar)')
  axs[3].set_xlabel('')
  pCO2[["air_flow_analyzer"]].dropna().plot(ax=axs[4], rot=0,
                                            ylim=gasflow_lims,
                                            legend=False)
  axs[4].set_ylabel('Flow rate analyzer\n(ml/min)')
  axs[4].set_xlabel('')
  plt.savefig("underway_equ.png", bbox_inches="tight"); plt.close()
  "underway_equ.png"
#+END_SRC

#+ATTR_LATEX: :width \textwidth
#+RESULTS: underway_01
[[file:underway_equ.png]]

#+NAME: underway_02
#+BEGIN_SRC python :results file :exports results
  # ax=pCO2[["temperature_external"]].dropna().plot(figsize=(10, 5), rot=0,
  #                                                 style="-.",
  #                                                 ylim=H2O_temp_lims,
  #                                                 legend=False)
  ax=pCO2[["tsg_temperature"]].dropna().plot(figsize=(10, 5), rot=0,
                                             style="-.",
                                             ylim=H2O_temp_lims,
                                             legend=False)
  # pCO2[["tsg_temperature"]].dropna().plot(ax=ax, style="-", legend=False)
  # ax.legend(ax.get_lines(), ["CR23X", "TSG"])
  ax.set_ylabel('Water temperature\n(C$^\circ$)')
  ax.set_xlabel('')
  plt.savefig("external_temperature.png", bbox_inches="tight"); plt.close()
  "external_temperature.png"
#+END_SRC

#+ATTR_LATEX: :width \textwidth
#+RESULTS: underway_02
[[file:external_temperature.png]]
